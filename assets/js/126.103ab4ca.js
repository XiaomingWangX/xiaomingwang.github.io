(window.webpackJsonp=window.webpackJsonp||[]).push([[126],{400:function(l,e,v){"use strict";v.r(e);var _=v(10),t=Object(_.a)({},function(){var l=this,e=l.$createElement,v=l._self._c||e;return v("ContentSlotsDistributor",{attrs:{"slot-key":l.$parent.slotKey}},[v("h2",{attrs:{id:"同步-app自己r-w"}},[l._v("同步 app自己R/W")]),l._v(" "),v("h2",{attrs:{id:"异步-kernel完成r-w"}},[l._v("异步 kernel完成R/W")]),l._v(" "),v("ul",[v("li",[l._v("(好像程序没有访问io,只访问了buffer,只有windows iocp 是异步)")]),l._v(" "),v("li",[l._v("linux目前没有内核的异步处理3W饿死在5解决方案")])]),l._v(" "),v("h2",{attrs:{id:"阻塞-blocking"}},[l._v("阻塞 BLOCKING")]),l._v(" "),v("h2",{attrs:{id:"非阻塞-nonblocking"}},[l._v("非阻塞 NONBLOCKING")]),l._v(" "),v("h2",{attrs:{id:"同步阻塞"}},[l._v("同步阻塞")]),l._v(" "),v("p",[l._v("程序自己读取，调用了方法一直等待有效结果返回")]),l._v(" "),v("h2",{attrs:{id:"同步非阻塞"}},[l._v("同步非阻塞")]),l._v(" "),v("p",[l._v("程序自己读取,调用方法一瞬间给出是否读到（自己解决下一次什么时候读）\nlinux 和netty")]),l._v(" "),v("h3",{attrs:{id:"nio"}},[l._v("NIO")]),l._v(" "),v("ul",[v("li",[l._v("遍历的过程成本在用户态内核态切换")]),l._v(" "),v("li",[l._v("优势 通过一个或几个线程 来解决N个IO连接的处理")]),l._v(" "),v("li",[l._v("问题 没循环一次O(n)复杂度，很多调用是无意义的")])]),l._v(" "),v("h3",{attrs:{id:"java-nio"}},[l._v("java NIO")]),l._v(" "),v("p",[l._v("serverSocketChannel.configBlocking(false)// OS NONBLOCKING\nserverSocketChannel.accept(); //如果 false不阻塞")]),l._v(" "),v("h4",{attrs:{id:"ulimit-n-配置1024-为什么开启的fd超过1024？"}},[l._v("ulimit -n 配置1024 为什么开启的fd超过1024？")]),l._v(" "),v("p",[l._v("root 用户不受限制")]),l._v(" "),v("h4",{attrs:{id:"linux-nio"}},[l._v("linux NIO")]),l._v(" "),v("ul",[v("li",[l._v("内核实现的，有配置")])]),l._v(" "),v("h4",{attrs:{id:"select-比较早"}},[l._v("select 比较早")]),l._v(" "),v("ul",[v("li",[l._v("synchronous I/O multiplexing 同步的io多路复用器")]),l._v(" "),v("li",[l._v("1024的限制 man select 查看")]),l._v(" "),v("li",[l._v("这个遍历的过程出发了一次系统调用，用户态内核态的切换，过程中把fds传给内核，\n内核重新根据用户这次调用传过来的fds遍历修改状态")]),l._v(" "),v("li",[l._v("循环 单调用")])]),l._v(" "),v("h5",{attrs:{id:"弊端"}},[l._v("弊端:")]),l._v(" "),v("ul",[v("li",[l._v("每次都要重新传递fds")]),l._v(" "),v("li",[l._v("每次内核被调用以后，针对这次调用出发一个遍历fds全量的复杂度")])]),l._v(" "),v("h4",{attrs:{id:"poll"}},[l._v("poll")]),l._v(" "),v("ul",[v("li",[l._v("select 升级可以理解为select 升级  没有1024限制")]),l._v(" "),v("li",[l._v("这个遍历的过程出发了一次系统调用，用户态内核态的切换，过程中把fds传给内核，\n内核重新根据用户这次调用传过来的fds遍历修改状态")]),l._v(" "),v("li",[l._v("循环 单调用\n"),v("img",{attrs:{src:"/img/network/poll_1.png",alt:"poll1"}})])]),l._v(" "),v("h5",{attrs:{id:"弊端-2"}},[l._v("弊端:")]),l._v(" "),v("ul",[v("li",[l._v("每次都要重新传递fds")]),l._v(" "),v("li",[l._v("每次内核被调用以后，针对这次调用出发一个遍历fds全量的复杂度")])]),l._v(" "),v("h4",{attrs:{id:"epoll"}},[l._v("epoll")]),l._v(" "),v("ul",[v("li",[l._v("再升级\n"),v("img",{attrs:{src:"/img/network/epoll_1.png",alt:"epoll1"}})])]),l._v(" "),v("h4",{attrs:{id:"无论nio-select-poll-都要遍历所有的io-询问状态"}},[l._v("无论NIO SELECT POLL 都要遍历所有的io 询问状态")]),l._v(" "),v("p",[l._v("-----------计组-------------")]),l._v(" "),v("h3",{attrs:{id:"中断（概念）"}},[l._v("中断（概念）")]),l._v(" "),v("p",[l._v("去中间向量表找（int 0-255，callback） 80就是中断 callback 回调函数")]),l._v(" "),v("ul",[v("li",[l._v("硬中断（时钟中断，晶振）")]),l._v(" "),v("li",[l._v("软中断（陷阱）\nint 80")]),l._v(" "),v("li",[l._v("io中断（网卡 鼠标 键盘等）")])]),l._v(" "),v("h4",{attrs:{id:"epoll-之前的callback"}},[l._v("epoll 之前的callback")]),l._v(" "),v("ul",[v("li",[v("p",[l._v("只是完成了网卡发来的数据走内核协议栈（2链路层，3网络层，4传输控制层），\n最终关联到fd的buffer里，所以你某一时间如果从app询问内核某一个或者\n某些FD可能是有可R/W的，会有状态返回")])]),l._v(" "),v("li",[v("p",[l._v("如果内核在callback处理中再加入链表？")])])]),l._v(" "),v("h5",{attrs:{id:"epoll-create"}},[l._v("epoll create")]),l._v(" "),v("ul",[v("li",[l._v("在内核开辟一个空间（红黑树）fd6")])]),l._v(" "),v("h5",{attrs:{id:"epoll-ctl"}},[l._v("epoll_ctl")]),l._v(" "),v("ul",[v("li",[l._v("在fd6里面存一个fd4（read状态）(链表)")])]),l._v(" "),v("h5",{attrs:{id:"epoll-wait"}},[l._v("epoll_wait")]),l._v(" "),v("ul",[v("li",[l._v("遍历fd4链表(就不用全遍历了)")])]),l._v(" "),v("h4",{attrs:{id:"整理下"}},[l._v("整理下")]),l._v(" "),v("ul",[v("li",[l._v("数据先到达内存")]),l._v(" "),v("li",[l._v("中断 callback")]),l._v(" "),v("li",[l._v("将数据和fd关联起来(网卡的数据扔到buffer)")]),l._v(" "),v("li",[l._v("中断延伸 处理了buffer以后延伸处理")]),l._v(" "),v("li",[l._v("内核中程序处理完fd的buffer,状态 之后,继续把有有状态的fd copy到链表中")]),l._v(" "),v("li",[l._v("epoll_wait拿到 fds(链表) 然后accept")]),l._v(" "),v("li",[l._v("当有N个fd有R/W的时候 (将N个FD分组 每一个组一个selector，将一个selector压到一个线程上)")])]),l._v(" "),v("h4",{attrs:{id:"java-selector"}},[l._v("java selector")]),l._v(" "),v("ul",[v("li",[l._v("启动的时候 指定")])]),l._v(" "),v("div",{staticClass:"language- line-numbers-mode"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[l._v("-Djava.nio.channels.spi.SelectorProvider=sun.nio.ch.EPollSelectorProvider\n-Djava.nio.channels.spi.SelectorProvider=sun.nio.ch.PollSelectorProvider \n strace -ff -o out java \n-cp /root/netty-all-4.1.48.Final.jar:.  NettyIO\n")])]),l._v(" "),v("div",{staticClass:"line-numbers-wrapper"},[v("span",{staticClass:"line-number"},[l._v("1")]),v("br"),v("span",{staticClass:"line-number"},[l._v("2")]),v("br"),v("span",{staticClass:"line-number"},[l._v("3")]),v("br"),v("span",{staticClass:"line-number"},[l._v("4")]),v("br")])]),v("ul",[v("li",[v("p",[l._v("server约等于listen状态的fd")])]),l._v(" "),v("li",[v("p",[l._v("select poll: server.register(selector,SelectionKey.OP_ACCEPT);jvm里开辟一个数字 把fd放进去")])]),l._v(" "),v("li",[v("p",[l._v("epoll: selector.open就完成了 epoll_wait server.register是epoll_ctl(fd3,ADD,fd4,EPOLLIN)")])]),l._v(" "),v("li",[v("p",[l._v("selector.select(500)>0\n(select poll是内核的select(fd4)\nepoll是内核的epoll_wait) select 之后拿到可以R/W的Set")])])]),l._v(" "),v("p",[l._v("selector.wakeup() 可以直接返回结果")]),l._v(" "),v("ul",[v("li",[v("p",[l._v("如果key.isAcceptable()\nacceptHandler(key)\n在里面SocketChannel client=key.accept()\n然后client.register(selector,SelectionKey.OP_ACCEPT,buffer)")])]),l._v(" "),v("li",[v("p",[l._v("如果key.isReadable()\nreadHanlder(key) ********(这里影响速度) IO THREADS")])]),l._v(" "),v("li",[v("p",[l._v("redis是不是用了epoll 是不是有IO THREADS 是不是单线程")])]),l._v(" "),v("li",[v("p",[l._v("tomcat  8 9之后是不是也有异步处理方式 IO和处理上的")])])]),l._v(" "),v("h3",{attrs:{id:"cpu"}},[l._v("cpu")]),l._v(" "),v("h3",{attrs:{id:"内存"}},[l._v("内存")]),l._v(" "),v("ul",[v("li",[l._v("kernel")]),l._v(" "),v("li",[l._v("app")]),l._v(" "),v("li",[l._v("DMA")])])])},[],!1,null,null,null);e.default=t.exports}}]);