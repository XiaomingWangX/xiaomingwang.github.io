(window.webpackJsonp=window.webpackJsonp||[]).push([[125],{397:function(_,v,t){"use strict";t.r(v);var p=t(10),i=Object(p.a)({},function(){var _=this,v=_.$createElement,t=_._self._c||v;return t("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[t("h2",{attrs:{id:"tcp"}},[_._v("tcp")]),_._v(" "),t("h3",{attrs:{id:"tcpcopy"}},[_._v("tcpCopy")]),_._v(" "),t("p",[t("img",{attrs:{src:"/img/network/tcpCopy_1.png",alt:"tcpCopy"}})]),_._v(" "),t("h3",{attrs:{id:"长连接"}},[_._v("长连接")]),_._v(" "),t("ul",[t("li",[t("p",[_._v("举一个例子：http 1.0 ，1.1 没有开启keepalive保持，连接只负责一次同步阻塞的请求+响应，短连接！")])]),_._v(" "),t("li",[t("p",[_._v("举一个例子：http 1.0,1.1 开启了keepalive保持，同步复用连接：多次(请求+响应)，以上是无状态通信，长连接！")])]),_._v(" "),t("li",[t("p",[_._v("举一个列子：dubbo协议(rpc)，打开连接，同步/异步复用连接：多次（请求+响应）（请求请求）（响应响应），当复用连接的时候，需要消息的ID，而且客户端和服务端同时完成这个约束  有状态通信，长连接！")])])]),_._v(" "),t("h3",{attrs:{id:"用户空间三层"}},[_._v("用户空间三层")]),_._v(" "),t("ul",[t("li",[_._v("应用层")]),_._v(" "),t("li",[_._v("表示层")]),_._v(" "),t("li",[_._v("会话层")])]),_._v(" "),t("h3",{attrs:{id:"内核空间四层"}},[_._v("内核空间四层")]),_._v(" "),t("ul",[t("li",[_._v("传输层")]),_._v(" "),t("li",[_._v("网络层")]),_._v(" "),t("li",[_._v("数据链路层")]),_._v(" "),t("li",[_._v("物理层")])]),_._v(" "),t("h3",{attrs:{id:"tcp-四层"}},[_._v("TCP 四层")]),_._v(" "),t("ul",[t("li",[_._v("应用层")]),_._v(" "),t("li",[_._v("传输层")]),_._v(" "),t("li",[_._v("网络层")]),_._v(" "),t("li",[_._v("链路层")])]),_._v(" "),t("p",[_._v("###三次握手")]),_._v(" "),t("ul",[t("li",[_._v("SYN-SEND   syn     -> SYN-RCVD")]),_._v(" "),t("li",[_._v("SYN-RCVD   syn+ack -> ESTABLISHED")]),_._v(" "),t("li",[_._v("ESTABLISHED ACK    -> ESTABLISHED")])]),_._v(" "),t("h3",{attrs:{id:"四次分手"}},[_._v("四次分手")]),_._v(" "),t("ul",[t("li",[_._v("FIN-WAIT1   FIN      ->CLOSE-WAIT")]),_._v(" "),t("li",[_._v("CLOSE-WAIT  FIN+ACK  ->FIN-WAIT2")]),_._v(" "),t("li",[_._v("LAST-ACK    FIN      ->TIME-WAIT")]),_._v(" "),t("li",[_._v("TIME-WAIT   ACK      ->CLOSED")])]),_._v(" "),t("p",[t("img",{attrs:{src:"/img/network/4_fin.png",alt:"4fin"}})]),_._v(" "),t("h3",{attrs:{id:"io模型-io是程序对着内核socket-queue的包装"}},[_._v("IO模型 IO是程序对着内核socket-queue的包装")]),_._v(" "),t("h4",{attrs:{id:"bio"}},[_._v("BIO")]),_._v(" "),t("p",[_._v("读取，一直等着queue里有才返回，阻塞模型，每个连接对应一个线程")]),_._v(" "),t("h4",{attrs:{id:"nio"}},[_._v("NIO")]),_._v(" "),t("p",[_._v("读取，立即返回：两种结果，读到，没读到，程序逻辑要自己维护 nio noblock")]),_._v(" "),t("h4",{attrs:{id:"aio"}},[_._v("AIO")]),_._v(" "),t("h3",{attrs:{id:"半连接队列"}},[_._v("半连接队列")]),_._v(" "),t("p",[_._v("在centos6.5(linux内核2.6.32)环境下，半连接队列最大值不是单单由 tcp_max_syn_backlog 决定，还跟 somaxconn 和 backlog 有关系")]),_._v(" "),t("h4",{attrs:{id:"syncookies"}},[_._v("syncookies")]),_._v(" "),t("p",[_._v("当开启了 syncookies 功能就可以在不使用 SYN 半连接队列的情况下成功建立连接\ntcp_syncookies 参数主要有以下三个值，可以在 /proc/sys/net/ipv4/tcp_syncookies 修改该值。")]),_._v(" "),t("p",[_._v("0 值，表示关闭该功能；")]),_._v(" "),t("p",[_._v("1 值，表示仅当 SYN 半连接队列放不下时，再启用它；")]),_._v(" "),t("p",[_._v("2 值，表示无条件开启功能")]),_._v(" "),t("h3",{attrs:{id:"全连接队列"}},[_._v("全连接队列")]),_._v(" "),t("p",[_._v("wrk 发送并发请求 wrk -t 6 -c 30000 -d 60s http://XXXX")]),_._v(" "),t("p",[_._v("/proc/sys/net/core/somaxconn 设置")]),_._v(" "),t("p",[_._v("backlog 是 listen(int sockfd, int backlog) 函数中的 backlog 大小，Nginx 默认值是 511 server里配置")]),_._v(" "),t("p",[_._v("ss -lnt")]),_._v(" "),t("p",[_._v("Recv-Q：当前全连接队列的大小，也就是当前已完成三次握手并等待服务端 accept() 的 TCP 连接")]),_._v(" "),t("p",[_._v("Send-Q：当前全连接最大队列长度，上面的输出结果说明监听 8088 端口的 TCP 服务，最大全连接长度为 128")]),_._v(" "),t("p",[_._v("当服务端并发处理大量请求时，如果 TCP 全连接队列过小，就容易溢出。发生 TCP 全连接队溢出的时候，后续的请求就会被丢弃。")]),_._v(" "),t("h3",{attrs:{id:"tcp的几种状态"}},[_._v("tcp的几种状态")]),_._v(" "),t("p",[_._v("一、LISTENING")]),_._v(" "),t("p",[_._v("提供某种服务，侦听远方TCP端口的连接请求，当提供的服务没有被连接时，处于LISTENING状态，端口是开放的，等待被连接。")]),_._v(" "),t("p",[_._v("二、SYN_SENT (客户端状态)")]),_._v(" "),t("p",[_._v("客户端调用connect，发送一个SYN请求建立一个连接，在发送连接请求后等待匹配的连接请求，此时状态为SYN_SENT.")]),_._v(" "),t("p",[_._v("三、SYN_RECEIVED (服务端状态)")]),_._v(" "),t("p",[_._v("在收到和发送一个连接请求后，等待对方对连接请求的确认，当服务器收到客户端发送的同步信号时，将标志位ACK和SYN置1发送给客户端，此时服务器端处于SYN_RCVD状态，如果连接成功了就变为ESTABLISHED，正常情况下SYN_RCVD状态非常短暂。")]),_._v(" "),t("p",[_._v("四、ESTABLISHED")]),_._v(" "),t("p",[_._v("ESTABLISHED状态是表示两台机器正在传输数据。")]),_._v(" "),t("p",[_._v("五、FIN-WAIT-1")]),_._v(" "),t("p",[_._v("等待远程TCP连接中断请求，或先前的连接中断请求的确认，主动关闭端应用程序调用close，TCP发出FIN请求主动关闭连接，之后进入FIN_WAIT1状态。")]),_._v(" "),t("p",[_._v("六、FIN-WAIT-2")]),_._v(" "),t("p",[_._v("从远程TCP等待连接中断请求，主动关闭端接到ACK后，就进入了FIN-WAIT-2 .这是在关闭连接时，客户端和服务器两次握手之后的状态，是著名的半关闭的状态了，在这个状态下，应用程序还有接受数据的能力，但是已经无法发送数据，但是也有一种可能是，客户端一直处于FIN_WAIT_2状态，而服务器则一直处于WAIT_CLOSE状态，而直到应用层来决定关闭这个状态。")]),_._v(" "),t("p",[_._v("七、CLOSE-WAIT")]),_._v(" "),t("p",[_._v("等待从本地用户发来的连接中断请求 ，被动关闭端TCP接到FIN后，就发出ACK以回应FIN请求(它的接收也作为文件结束符传递给上层应用程序),并进入CLOSE_WAIT.")]),_._v(" "),t("p",[_._v("八、CLOSING")]),_._v(" "),t("p",[_._v("等待远程TCP对连接中断的确认,处于此种状态比较少见。")]),_._v(" "),t("p",[_._v("九、LAST-ACK")]),_._v(" "),t("p",[_._v("等待原来的发向远程TCP的连接中断请求的确认,被动关闭端一段时间后，接收到文件结束符的应用程序将调用CLOSE关闭连接,TCP也发送一个 FIN,等待对方的ACK.进入LAST-ACK。")]),_._v(" "),t("p",[_._v("十、TIME-WAIT")]),_._v(" "),t("p",[_._v("在主动关闭端接收到FIN后，TCP就发送ACK包，并进入TIME-WAIT状态,等待足够的时间以确保远程TCP接收到连接中断请求的确认,很大程度上保证了双方都可以正常结束,但是也存在问题，须等待2MSL时间的过去才能进行下一次连接。")]),_._v(" "),t("p",[_._v("十一、CLOSED")]),_._v(" "),t("p",[_._v("被动关闭端在接受到ACK包后，就进入了closed的状态，连接结束，没有任何连接状态。")]),_._v(" "),t("h3",{attrs:{id:"tcp-应塞"}},[_._v("tcp 应塞")]),_._v(" "),t("h3",{attrs:{id:"keepalive"}},[_._v("keepalive")]),_._v(" "),t("p",[_._v("TCP如果双方建立了连接，很久都不说话，对方还活着吗？保持连接？")]),_._v(" "),t("h3",{attrs:{id:"trace-追踪和内核的交互"}},[_._v("trace  追踪和内核的交互")]),_._v(" "),t("p",[_._v("trace -ff -o out /usr/local/java/j2sdk1.8//java TestSocket\ncd testsocket/")]),_._v(" "),t("h3",{attrs:{id:"tcp快速重传"}},[_._v("tcp快速重传")]),_._v(" "),t("ul",[t("li",[t("p",[_._v("快速重传机制[RFC5681]基于接收端的反馈信息来引发重传，而非基于计时器超时重传。与超时重传相比，快速重传能更加及时有效地修复丢包情况。")])]),_._v(" "),t("li",[t("p",[_._v("快速重传机制要求当接收到失序报文段时，TCP需要立即生成确认信息（重复ACK），并且失序情况表明在后续数据到达前出现了丢包，发送端的工作即为尽快填补丢包带来的数据段空缺。")])]),_._v(" "),t("li",[t("p",[_._v("所谓重复ACK，举个例子，假设A与B之间建立连接，A向B发送数据，有4个TCP报文段，序列号分别为：N-1，N，N+1，N+2。再假设序列号N的报文段丢失（也许只是延迟到达），将会导致失序：N-1，N+1，N+2。此时接收端回复的ACK将会是N，N，N（接收到N-1的报文段后接收端认为下一个应该是N）。因此TCP等待一定数目的重复ACK（称为重复ACK阙值或dupthresh），来决定数据是否丢失并触发快速重传。通常这个阙值为常量3，但也有一些协议实现可基于当前的失序程度动态调节该值")])]),_._v(" "),t("li",[t("p",[_._v("快速重传算法可以概括如下：TCP发送端在观测到至少dupthresh个重复ACK后，即重传可能丢失的数据分组，而不必等到重传计时器超时。不采用SACK时，在接收到有效ACK前最多只能重传一个报文段。根据重复ACK推断的丢包通常与网络拥塞有关，因此快速重传也会触发拥塞控制机制。采用SACK（见下文），ACK可包含额外信息，使得发送端在每个RTT时间内可以填补多个空缺")])])]),_._v(" "),t("h3",{attrs:{id:"http-keep-alive"}},[_._v("http Keep-Alive")]),_._v(" "),t("p",[_._v("在下载某些站点的时候，看到返回的http头中，有明确的对长连接的timeout限制。")]),_._v(" "),t("p",[_._v("Keep-Alive: timeout=1, max=100")]),_._v(" "),t("p",[_._v("timeout：过期时间1秒（对应httpd.conf里的参数是：KeepAliveTimeout），max是最多一百次请求。这两个限制条件，只要满足一个就会强制断掉连接。")]),_._v(" "),t("p",[_._v("就是在timeout时间内又有新的请求过来，同时max会自动减1，直到为0，强制断掉")])])},[],!1,null,null,null);v.default=i.exports}}]);