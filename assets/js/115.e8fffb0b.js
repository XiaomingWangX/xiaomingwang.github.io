(window.webpackJsonp=window.webpackJsonp||[]).push([[115],{388:function(e,s,n){"use strict";n.r(s);var t=n(10),r=Object(t.a)({},function(){var e=this,s=e.$createElement,n=e._self._c||s;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h3",{attrs:{id:"zuul-过滤规则"}},[e._v("zuul 过滤规则")]),e._v(" "),n("p",[e._v("PRE: 在请求被路由之前调用，可利用这种过滤器实现身份验证。选择微服务，记录日志。\nROUTING:在将请求路由到微服务调用，用于构建发送给微服务的请求，并用http clinet（或者ribbon）请求微服务。\nPOST:在调用微服务执行后。可用于添加header，记录日志，将响应发给客户端。\nERROR:在其他阶段发生错误是，走此过滤器。")]),e._v(" "),n("h3",{attrs:{id:"自定义过滤器"}},[e._v("自定义过滤器")]),e._v(" "),n("p",[e._v("PreFilter看代码，注意下面4点。\nfilterType：pre，routing,post,error\nfilterOrder:执行顺序，在谁前，在谁后，可以+1，-1\nshouldFilter：此过滤器是否执行，true  false，可以写过滤器是否执行的判断条件。\nrun：具体执行逻辑。")]),e._v(" "),n("h3",{attrs:{id:"源码"}},[e._v("源码")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("ZuulServlet中service方法第一行。\n\n从ZuulFilter类的Object res = run();进入每个过滤器。包括路由转发规则（此时debug主要 走route方法。不是preRoute）。\n我只debug了。RibbonRoutingFilter（debug时。list有三个RibbonRoutingFilter，SimpleHostRoutingFilter，SendForwardFilter）。ServletDetectionFilter。通过网关token地址去debug。\n\n选择路由用哪个过滤器，注意每个路由规则过滤器的：\n@Override\n\tpublic boolean shouldFilter() {\n\t\tRequestContext ctx = RequestContext.getCurrentContext();\n\t\treturn (ctx.getRouteHost() == null && ctx.get(SERVICE_ID_KEY) != null\n\t\t\t\t&& ctx.sendZuulResponse());\n\t}\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br")])]),n("p",[e._v("###过滤器执行流程")]),e._v(" "),n("p",[e._v("关键：（请求转发器）ZuulServlet，所有请求先到ZuulServlet")]),e._v(" "),n("p",[e._v("上面类注入了servlet，打开servlet，"),n("em",[n("strong",[e._v("过滤器执行的关键")])]),e._v("  为什么 先pre，routing，post")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('public class ZuulServlet extends HttpServlet\n\n// zuul执行器，ZuulServlet直接访问这个类的方法\nprivate ZuulRunner zuulRunner;\n\n可以断点到service\n看业务逻辑：\n@Override\n    public void service(javax.servlet.ServletRequest servletRequest, javax.servlet.ServletResponse servletResponse) throws ServletException, IOException {\n        try {\n        //包装http请求和响应\n            init((HttpServletRequest) servletRequest, (HttpServletResponse) servletResponse);\n\n            // Marks this request as having passed through the "Zuul engine", as opposed to servlets\n            // explicitly bound in web.xml, for which requests will not have the same data attached\n            \n            获取当前的请求上下文\n            RequestContext context = RequestContext.getCurrentContext();\n            context.setZuulEngineRan();\n\n            try {\n            执行前置过滤器，主要做权限严重，限流。debug一个一个进入。zuulRunner->FilterProcessor(由它来执行具体过滤器，)\n                preRoute();\n            } catch (ZuulException e) {\n            // 如果执行出错，先执行错误处理，再执行后置过滤器，此处注意一下\n                error(e);\n                // 为什么要走post，因为要响应用户，\n                postRoute();\n                return;\n            }\n            try {\n            路由过滤器，有zuul构造请求，访问实际微服务。\n                route();\n            } catch (ZuulException e) {\n                error(e);\n                postRoute();\n                return;\n            }\n            try {\n            后置过滤器，将微服务的响应数据，响应给用户。\n                postRoute();\n            } catch (ZuulException e) {\n                error(e);\n                return;\n            }\n\n        } catch (Throwable e) {\n            error(new ZuulException(e, 500, "UNHANDLED_EXCEPTION_" + e.getClass().getName()));\n        } finally {\n            RequestContext.getCurrentContext().unset();\n        }\n    }\n    \n这个方法为每个请求生成了RequestContext,RequestContext继承了ConcurrentHashMap<String, Object>，在请求结束时销毁掉该RequestContext，RequestContext的生命周期为请求到zuulServlet开始处理，直到请求结束返回结果。\nRequestContext类在存储了很多重要的信息，包括HttpServletRequest、HttpServletRespons、ResponseDataStream、ResponseStatusCode等。 RequestContext对象在处理请求的过程中，一直存在，所以这个对象为所有Filter共享。\n\n从ZuulServlet的service（）方法可知，它是先处理pre()类型的处理器，然后在处理route()类型的处理器，最后再处理post类型的处理器。\n\n\n\n\n')])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br"),n("span",{staticClass:"line-number"},[e._v("13")]),n("br"),n("span",{staticClass:"line-number"},[e._v("14")]),n("br"),n("span",{staticClass:"line-number"},[e._v("15")]),n("br"),n("span",{staticClass:"line-number"},[e._v("16")]),n("br"),n("span",{staticClass:"line-number"},[e._v("17")]),n("br"),n("span",{staticClass:"line-number"},[e._v("18")]),n("br"),n("span",{staticClass:"line-number"},[e._v("19")]),n("br"),n("span",{staticClass:"line-number"},[e._v("20")]),n("br"),n("span",{staticClass:"line-number"},[e._v("21")]),n("br"),n("span",{staticClass:"line-number"},[e._v("22")]),n("br"),n("span",{staticClass:"line-number"},[e._v("23")]),n("br"),n("span",{staticClass:"line-number"},[e._v("24")]),n("br"),n("span",{staticClass:"line-number"},[e._v("25")]),n("br"),n("span",{staticClass:"line-number"},[e._v("26")]),n("br"),n("span",{staticClass:"line-number"},[e._v("27")]),n("br"),n("span",{staticClass:"line-number"},[e._v("28")]),n("br"),n("span",{staticClass:"line-number"},[e._v("29")]),n("br"),n("span",{staticClass:"line-number"},[e._v("30")]),n("br"),n("span",{staticClass:"line-number"},[e._v("31")]),n("br"),n("span",{staticClass:"line-number"},[e._v("32")]),n("br"),n("span",{staticClass:"line-number"},[e._v("33")]),n("br"),n("span",{staticClass:"line-number"},[e._v("34")]),n("br"),n("span",{staticClass:"line-number"},[e._v("35")]),n("br"),n("span",{staticClass:"line-number"},[e._v("36")]),n("br"),n("span",{staticClass:"line-number"},[e._v("37")]),n("br"),n("span",{staticClass:"line-number"},[e._v("38")]),n("br"),n("span",{staticClass:"line-number"},[e._v("39")]),n("br"),n("span",{staticClass:"line-number"},[e._v("40")]),n("br"),n("span",{staticClass:"line-number"},[e._v("41")]),n("br"),n("span",{staticClass:"line-number"},[e._v("42")]),n("br"),n("span",{staticClass:"line-number"},[e._v("43")]),n("br"),n("span",{staticClass:"line-number"},[e._v("44")]),n("br"),n("span",{staticClass:"line-number"},[e._v("45")]),n("br"),n("span",{staticClass:"line-number"},[e._v("46")]),n("br"),n("span",{staticClass:"line-number"},[e._v("47")]),n("br"),n("span",{staticClass:"line-number"},[e._v("48")]),n("br"),n("span",{staticClass:"line-number"},[e._v("49")]),n("br"),n("span",{staticClass:"line-number"},[e._v("50")]),n("br"),n("span",{staticClass:"line-number"},[e._v("51")]),n("br"),n("span",{staticClass:"line-number"},[e._v("52")]),n("br"),n("span",{staticClass:"line-number"},[e._v("53")]),n("br"),n("span",{staticClass:"line-number"},[e._v("54")]),n("br"),n("span",{staticClass:"line-number"},[e._v("55")]),n("br"),n("span",{staticClass:"line-number"},[e._v("56")]),n("br"),n("span",{staticClass:"line-number"},[e._v("57")]),n("br"),n("span",{staticClass:"line-number"},[e._v("58")]),n("br"),n("span",{staticClass:"line-number"},[e._v("59")]),n("br"),n("span",{staticClass:"line-number"},[e._v("60")]),n("br"),n("span",{staticClass:"line-number"},[e._v("61")]),n("br")])]),n("h3",{attrs:{id:"流程总结：zuulservlet-zuulerrunner-filterprocessor"}},[e._v("流程总结：zuulServlet->ZuulerRunner->FilterProcessor***")]),e._v(" "),n("p",[e._v("主要执行在FilterProcessor（获取过滤器列表，然后执行）")])])},[],!1,null,null,null);s.default=r.exports}}]);