(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{285:function(e,t,n){"use strict";n.r(t);var r=n(10),a=Object(r.a)({},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("p",[e._v("##java引用")]),e._v(" "),n("h3",{attrs:{id:"_1-强引用"}},[e._v("1.强引用")]),e._v(" "),n("p",[e._v("强引用是使用最普遍的引用：Object o=new Object(); 特点：不会被GC")]),e._v(" "),n("h3",{attrs:{id:"_2-weakreference"}},[e._v("2.  WeakReference")]),e._v(" "),n("p",[e._v("弱引用与软引用的区别在于：只具有弱引用的对象拥有更短暂的生命周期。\n在垃圾回收器线程扫描它所管辖的内存区域的过程中，\n一旦发现了只具有弱引用的对象，不管当前内存空间足够与否，都会回收它的内存。\n不过，由于垃圾回收器是一个优先级很低的线程，因此不一定会很快发现那些只具有弱引用的对象")]),e._v(" "),n("h3",{attrs:{id:"_3-软引用-softreference"}},[e._v("3.软引用  SoftReference")]),e._v(" "),n("p",[e._v("软引用用来描述一些还有用但是并非必须的对象，在Java中用java.lang.ref.SoftReference类来表示。\n对于软引用关联着的对象，只有在内存不足的时候JVM才会回收该对象。\n因此，这一点可以很好地用来解决OOM的问题，并且这个特性很适合用来实现缓存：比如网页缓存、图片缓存等")]),e._v(" "),n("h3",{attrs:{id:"_4-虚引用"}},[e._v("4.虚引用")]),e._v(" "),n("p",[e._v("也称为幻影引用：一个对象是都有虚引用的存在都不会对生存时间都构成影响，也无法通过虚引用来获取对一个对象的真实引用。\n唯一的用处：跟踪它所引用的对象被垃圾回收器回收的活动，JAVA中用PhantomReference来实现虚引用")])])},[],!1,null,null,null);t.default=a.exports}}]);