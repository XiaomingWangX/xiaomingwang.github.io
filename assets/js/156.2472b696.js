(window.webpackJsonp=window.webpackJsonp||[]).push([[156],{429:function(t,s,a){"use strict";a.r(s);var e=a(10),n=Object(e.a)({},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"_11-13-施耐德"}},[t._v("11.13 施耐德")]),t._v(" "),a("h3",{attrs:{id:"基础"}},[t._v("基础")]),t._v(" "),a("h4",{attrs:{id:"_1-结构化程序设计的三种基本结构包括顺序、选择和重复（循环）"}},[t._v("1.结构化程序设计的三种基本结构包括顺序、选择和重复（循环）")]),t._v(" "),a("h4",{attrs:{id:"_2-路由器工作在osi的第三层"}},[t._v("2.路由器工作在osi的第三层")]),t._v(" "),a("h4",{attrs:{id:"_3-设在内存中有p1-p2-p3三道程序，并按照p1-p2-p3的优先级次序运行，其中内部计算和io操作时间由下表给出（cpu计算和io资源都只能同时由一个程序占用）："}},[t._v("3.设在内存中有P1,P2,P3三道程序，并按照P1,P2,P3的优先级次序运行，其中内部计算和IO操作时间由下表给出（CPU计算和IO资源都只能同时由一个程序占用）：")]),t._v(" "),a("pre",[a("code",[t._v("    P1:计算60ms---》IO 80ms---》计算20ms\n    P2:计算120ms---》IO 40ms---》计算40ms\n    P3:计算40ms---》IO 80ms---》计算40ms\n    并行完成三道程序比单道运行节省的时间是（160ms）\n")])]),t._v(" "),a("h3",{attrs:{id:"算法"}},[t._v("算法")]),t._v(" "),a("h4",{attrs:{id:"_1：给定一个无重复元素的数组-candidates-和一个目标数-target-，找出-candidates-中所有可以使数字和为-target-的组合。"}},[t._v("1：给定一个无重复元素的数组 candidates 和一个目标数 target ，找出 candidates 中所有可以使数字和为 target 的组合。")]),t._v(" "),a("h4",{attrs:{id:"_2-给定一个仅包含数字-0-9-的字符串-num-和一个目标值整数-target-，在-num-的数字之间添加-二元-运算符（不是一元）-、-或-，返回所有能够得到目标值的表达式。"}},[t._v("2.给定一个仅包含数字 0-9 的字符串 num 和一个目标值整数 target ，在 num 的数字之间添加 二元 运算符（不是一元）+、- 或 * ，返回所有能够得到目标值的表达式。")])])},[],!1,null,null,null);s.default=n.exports}}]);